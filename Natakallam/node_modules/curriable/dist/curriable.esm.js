/**
 * @constant __ placeholder used when parameters are skipped
 */
var __ = typeof Symbol === 'function' ? Symbol('curriable placeholder') : 0xedd1;
/**
 * @function recursiveCurry
 *
 * @description
 * recursively curry over the arguments until all have been resolved
 *
 * @param fn the function to curry
 * @param arity the length of the function to curry until
 * @param args the existing arguments
 * @returns the result of the function call
 */
function getCurried(fn, arity) {
    function _curried(args) {
        return function () {
            var length = args.length;
            var newArgs = arguments;
            var newArgsLength = newArgs.length;
            var combined = [];
            var newArgsIndex = 0;
            var remaining = arity;
            var value;
            if (length) {
                var index = -1;
                while (++index < length) {
                    combined[index] = value =
                        args[index] === __ && newArgsIndex < newArgsLength
                            ? newArgs[newArgsIndex++]
                            : args[index];
                    if (value !== __) {
                        --remaining;
                    }
                }
            }
            if (newArgsIndex < newArgsLength) {
                while (newArgsIndex < newArgsLength) {
                    combined[combined.length] = value = newArgs[newArgsIndex];
                    if (value !== __ && newArgsIndex < arity) {
                        --remaining;
                    }
                    ++newArgsIndex;
                }
            }
            return remaining > 0 ? _curried(combined) : fn.apply(this, combined);
        };
    }
    return _curried([]);
}

// utils
function curry(fn, arityOverride) {
    var arity = typeof arityOverride === 'number' ? arityOverride : fn.length;
    var curried = getCurried(fn, arity);
    curried.arity = arity;
    curried.fn = fn;
    return curried;
}
curry.__ = __;
/**
 * @function isPlaceholder
 *
 * @description
 * is the value passed a placeholder
 *
 * @param value the value to test
 * @returns whether the value is a placeholder
 */
function isPlaceholder(value) {
    return value === __;
}
curry.isPlaceholder = isPlaceholder;
/**
 * @function uncurry
 *
 * @description
 * return a function that is the non-curried version of the fn passed
 *
 * @param curried the curried function to uncurry
 * @returns the original fn
 */
function uncurry(curried) {
    return curried.fn;
}
curry.uncurry = uncurry;

export default curry;
export { __, curry, isPlaceholder, uncurry };
//# sourceMappingURL=curriable.esm.js.map
