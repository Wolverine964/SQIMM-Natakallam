"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const child_process_1 = require("child_process");
const util_1 = require("util");
const utils_1 = require("../../utils");
// This function returns true if the directory is not empty and false otherwise.
exports.isDirNotEmpty = ({ packagePath }) => {
    return fs_extra_1.pathExists(path_1.join(packagePath));
};
// This function ensures all directories that needs a package exist.
exports.ensurePackageDir = ({ packagePath }) => {
    return fs_extra_1.ensureDir(path_1.join(packagePath, "src"));
};
// This function creates a `package.json` file.
exports.createPackageJson = async ({ name, namespace, projectPath, packagePath }) => {
    // Get the latest version of Frontity from NPM registry
    const frontityVersion = await utils_1.fetchPackageVersion("frontity");
    const filePath = path_1.resolve(projectPath, packagePath, "package.json");
    const fileData = `{
  "name": "${name}",
  "version": "1.0.0",
  "description": "Frontity package created using the Frontity CLI.",
  "keywords": [
    "frontity",
    "frontity-${namespace}"
  ],
  "license": "Apache-2.0",
  "dependencies": {
    "frontity": "^${frontityVersion}"
  }
}${os_1.EOL}`;
    await fs_extra_1.writeFile(filePath, fileData);
};
// This function creates an `index.js` file.
exports.createSrcIndexJs = async ({ name, namespace, projectPath, packagePath }) => {
    const filePath = path_1.resolve(projectPath, packagePath, "src/index.js");
    const fileData = `import React from "react";

const Root = () => {
  return (
    <>
      You can edit your package in:
      <pre>${path_1.join(packagePath, "src/index.js")}</pre>
    </>
  );
};

export default {
  name: "${name}",
  roots: {
    ${namespace}: Root
  },
  state: {
    ${namespace}: {}
  },
  actions: {
    ${namespace}: {}
  }
};${os_1.EOL}`;
    await fs_extra_1.writeFile(filePath, fileData);
};
// This function executes the `npm i` command to add the
// created package
exports.installPackage = async ({ projectPath, packagePath }) => {
    await util_1.promisify(child_process_1.exec)(`npm install ${packagePath}`, { cwd: projectPath });
};
// This function removes the files and directories created
// with `frontity create-package`.
exports.revertProgress = async ({ projectPath, packagePath }) => {
    await fs_extra_1.remove(path_1.join(projectPath, packagePath));
};
