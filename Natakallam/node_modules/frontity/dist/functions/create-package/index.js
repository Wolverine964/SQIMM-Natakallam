"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const steps_1 = require("./steps");
exports.default = async (options, emitter) => {
    // This functions will emit an event if an emitter is passed in options.
    const emit = (message, step) => {
        if (emitter)
            emitter.emit("create", message, step);
    };
    let step;
    let dirExisted;
    process.on("SIGINT", async () => {
        if (typeof dirExisted !== "undefined")
            await steps_1.revertProgress(options);
    });
    try {
        // 1. Make sure ./packages/[name] folder is empty.
        step = steps_1.isDirNotEmpty(options);
        emit(`Checking if ${chalk_1.default.yellow(options.packagePath)} is not empty.`, step);
        const dirNotEmpty = await step;
        if (dirNotEmpty)
            throw new Error(`Folder "${options.packagePath}" must be empty.`);
        // 2. Create ./packages/[name] folder.
        step = steps_1.ensurePackageDir(options);
        emit(`Creating ${chalk_1.default.yellow(options.packagePath)} folder.`, step);
        dirExisted = await step;
        // 3. Creates `package.json`.
        step = steps_1.createPackageJson(options);
        emit(`Adding ${chalk_1.default.yellow("package.json")}.`, step);
        await step;
        // 4. Creates `src/index.js`.
        step = steps_1.createSrcIndexJs(options);
        emit(`Adding ${chalk_1.default.yellow("src/index.js")}.`, step);
        await step;
        // 5. Install package
        step = steps_1.installPackage(options);
        emit(`Installing package ${chalk_1.default.yellow(options.name)}.`, step);
        await step;
    }
    catch (error) {
        if (typeof dirExisted !== "undefined")
            await steps_1.revertProgress(options);
        if (emitter)
            emitter.emit("error", error);
        else
            throw error;
    }
};
