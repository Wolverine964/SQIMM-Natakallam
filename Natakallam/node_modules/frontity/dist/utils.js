"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const fs_extra_1 = require("fs-extra");
exports.isPackageNameValid = (name) => {
    if (name.length >= 214)
        return false;
    if ("._".includes(name[0]))
        return false;
    const specialCharacters = /[/:*?"<>|]/;
    if (specialCharacters.test(name))
        return false;
    const nameConventionMatch = /^(?:@[a-z0-9_.-]+\/)?[a-z0-9_.-]+$/;
    return nameConventionMatch.test(name);
};
exports.isThemeNameValid = (name) => {
    const nameConventionMatch = /^(?:@[\w-]+\/)?[\w-]+$/;
    return nameConventionMatch.test(name);
};
exports.errorLogger = (error, message) => {
    console.error(chalk_1.default.bold.red("\nError: ") +
        chalk_1.default.red(error.message) +
        "\n\n" +
        (message || "") +
        `If you need help please visit ${chalk_1.default.underline.magenta("https://community.frontity.org/")}.\n`);
    process.exit(1);
};
exports.isFrontityProjectRoot = async (path) => {
    const dirContent = await fs_extra_1.readdir(path);
    return dirContent.some(content => /^frontity\.settings\.(js|ts)$/i.test(content));
};
exports.fetchPackageVersion = async (pkg) => {
    const response = await node_fetch_1.default(`https://registry.npmjs.com/${pkg}`);
    const data = await response.json();
    if (data.error)
        throw new Error(`Package "${pkg}" not found on NPM.`);
    const version = data["dist-tags"].latest;
    return version;
};
