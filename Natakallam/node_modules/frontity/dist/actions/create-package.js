"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ora_1 = __importDefault(require("ora"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = require("path");
const inquirer_1 = require("inquirer");
const create_package_1 = __importDefault(require("../functions/create-package"));
const utils_1 = require("../utils");
const events_1 = require("events");
//  Command:
//    create-package [name] [--typescript]
//
//  Steps:
//    1. validate project location
//    2. ask for the package name if it wasn't passed as argument and validate
//    3. ask for the package namespace if it wasn't passed as argument
//    4. create package
exports.default = async (name, { namespace, typescript }) => {
    // Init options
    const options = { typescript };
    // Init event emitter
    const emitter = new events_1.EventEmitter();
    emitter.on("error", utils_1.errorLogger);
    emitter.on("create", (message, action) => {
        if (action)
            ora_1.default.promise(action, message);
        else
            console.log(message);
    });
    // 1. validate project location
    options.projectPath = process.cwd();
    if (!(await utils_1.isFrontityProjectRoot(options.projectPath))) {
        emitter.emit("error", new Error("You must execute this command in the root folder of a Frontity project."));
    }
    // 2. ask for the package name if it wasn't passed as argument and validate
    if (!name) {
        const questions = [
            {
                name: "name",
                type: "input",
                message: "Enter a name for the package:",
                default: "my-frontity-package"
            }
        ];
        const answers = await inquirer_1.prompt(questions);
        options.name = answers.name;
        console.log();
    }
    else {
        options.name = name;
    }
    if (!utils_1.isThemeNameValid(options.name)) {
        emitter.emit("error", new Error("The name of the package is not a valid npm package name."));
    }
    // 2.1 set the package path
    options.packagePath = path_1.normalize(`packages/${options.name.replace(/(?:@.+\/)/i, "")}`);
    // 3. ask for the package namespace if it wasn't passed as argument
    if (!namespace) {
        const questions = [
            {
                name: "namespace",
                type: "input",
                message: "Enter the namespace of the package:",
                default: "theme"
            }
        ];
        const answers = await inquirer_1.prompt(questions);
        options.namespace = answers.namespace;
        console.log();
    }
    else {
        options.namespace = namespace;
    }
    // 4. create package
    await create_package_1.default(options, emitter);
    console.log(chalk_1.default.bold(`\nNew package "${options.name}" created.\n`));
};
